//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SealSignBSSClientTest.BiometricAuthenticationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BiometricAuthenticationType", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASTypes")]
    public enum BiometricAuthenticationType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Signature = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SealSignDSSFaultContract", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASService")]
    [System.SerializableAttribute()]
    public partial class SealSignDSSFaultContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint errorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string stackTraceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint errorCode {
            get {
                return this.errorCodeField;
            }
            set {
                if ((this.errorCodeField.Equals(value) != true)) {
                    this.errorCodeField = value;
                    this.RaisePropertyChanged("errorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string stackTrace {
            get {
                return this.stackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.stackTraceField, value) != true)) {
                    this.stackTraceField = value;
                    this.RaisePropertyChanged("stackTrace");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BiometricAuthenticationService.IBiometricAuthenticationServiceBasic")]
    public interface IBiometricAuthenticationServiceBasic {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/Enable", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/EnableResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SealSignBSSClientTest.BiometricAuthenticationService.SealSignDSSFaultContract), Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/EnableSealSignDSSFaultCon" +
            "tractFault", Name="SealSignDSSFaultContract", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASService")]
        void Enable(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/Enable", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/EnableResponse")]
        System.Threading.Tasks.Task EnableAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/Disable", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/DisableResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SealSignBSSClientTest.BiometricAuthenticationService.SealSignDSSFaultContract), Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/DisableSealSignDSSFaultCo" +
            "ntractFault", Name="SealSignDSSFaultContract", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASService")]
        void Disable(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/Disable", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/DisableResponse")]
        System.Threading.Tasks.Task DisableAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/Remove", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/RemoveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SealSignBSSClientTest.BiometricAuthenticationService.SealSignDSSFaultContract), Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/RemoveSealSignDSSFaultCon" +
            "tractFault", Name="SealSignDSSFaultContract", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASService")]
        void Remove(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/Remove", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/RemoveResponse")]
        System.Threading.Tasks.Task RemoveAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/RemoveOnBehalfOf", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/RemoveOnBehalfOfResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SealSignBSSClientTest.BiometricAuthenticationService.SealSignDSSFaultContract), Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/RemoveOnBehalfOfSealSignD" +
            "SSFaultContractFault", Name="SealSignDSSFaultContract", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASService")]
        void RemoveOnBehalfOf(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/RemoveOnBehalfOf", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/RemoveOnBehalfOfResponse")]
        System.Threading.Tasks.Task RemoveOnBehalfOfAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/Enroll", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/EnrollResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SealSignBSSClientTest.BiometricAuthenticationService.SealSignDSSFaultContract), Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/EnrollSealSignDSSFaultCon" +
            "tractFault", Name="SealSignDSSFaultContract", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASService")]
        void Enroll(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, byte[] biometricState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/Enroll", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/EnrollResponse")]
        System.Threading.Tasks.Task EnrollAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, byte[] biometricState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/EnrollOnBehalfOf", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/EnrollOnBehalfOfResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SealSignBSSClientTest.BiometricAuthenticationService.SealSignDSSFaultContract), Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/EnrollOnBehalfOfSealSignD" +
            "SSFaultContractFault", Name="SealSignDSSFaultContract", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASService")]
        void EnrollOnBehalfOf(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id, byte[] biometricState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/EnrollOnBehalfOf", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/EnrollOnBehalfOfResponse")]
        System.Threading.Tasks.Task EnrollOnBehalfOfAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id, byte[] biometricState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/Verify", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/VerifyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SealSignBSSClientTest.BiometricAuthenticationService.SealSignDSSFaultContract), Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/VerifySealSignDSSFaultCon" +
            "tractFault", Name="SealSignDSSFaultContract", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASService")]
        SealSignBSSClientTest.BiometricAuthenticationService.VerifyResponse Verify(SealSignBSSClientTest.BiometricAuthenticationService.VerifyRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/Verify", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/VerifyResponse")]
        System.Threading.Tasks.Task<SealSignBSSClientTest.BiometricAuthenticationService.VerifyResponse> VerifyAsync(SealSignBSSClientTest.BiometricAuthenticationService.VerifyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/VerifyOnBehalfOf", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/VerifyOnBehalfOfResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SealSignBSSClientTest.BiometricAuthenticationService.SealSignDSSFaultContract), Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/VerifyOnBehalfOfSealSignD" +
            "SSFaultContractFault", Name="SealSignDSSFaultContract", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASService")]
        SealSignBSSClientTest.BiometricAuthenticationService.VerifyOnBehalfOfResponse VerifyOnBehalfOf(SealSignBSSClientTest.BiometricAuthenticationService.VerifyOnBehalfOfRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/VerifyOnBehalfOf", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/VerifyOnBehalfOfResponse")]
        System.Threading.Tasks.Task<SealSignBSSClientTest.BiometricAuthenticationService.VerifyOnBehalfOfResponse> VerifyOnBehalfOfAsync(SealSignBSSClientTest.BiometricAuthenticationService.VerifyOnBehalfOfRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/HasEnrollment", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/HasEnrollmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SealSignBSSClientTest.BiometricAuthenticationService.SealSignDSSFaultContract), Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/HasEnrollmentSealSignDSSF" +
            "aultContractFault", Name="SealSignDSSFaultContract", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASService")]
        bool HasEnrollment(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/HasEnrollment", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/HasEnrollmentResponse")]
        System.Threading.Tasks.Task<bool> HasEnrollmentAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/HasEnrollmentOnBehalfOf", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/HasEnrollmentOnBehalfOfRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SealSignBSSClientTest.BiometricAuthenticationService.SealSignDSSFaultContract), Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/HasEnrollmentOnBehalfOfSe" +
            "alSignDSSFaultContractFault", Name="SealSignDSSFaultContract", Namespace="http://schemas.datacontract.org/2004/07/SealSignBASService")]
        bool HasEnrollmentOnBehalfOf(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiometricAuthenticationServiceBasic/HasEnrollmentOnBehalfOf", ReplyAction="http://tempuri.org/IBiometricAuthenticationServiceBasic/HasEnrollmentOnBehalfOfRe" +
            "sponse")]
        System.Threading.Tasks.Task<bool> HasEnrollmentOnBehalfOfAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Verify", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class VerifyRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public byte[] biometricState;
        
        public VerifyRequest() {
        }
        
        public VerifyRequest(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, byte[] biometricState) {
            this.type = type;
            this.biometricState = biometricState;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="VerifyResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class VerifyResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool VerifyResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public double score;
        
        public VerifyResponse() {
        }
        
        public VerifyResponse(bool VerifyResult, double score) {
            this.VerifyResult = VerifyResult;
            this.score = score;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="VerifyOnBehalfOf", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class VerifyOnBehalfOfRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public byte[] biometricState;
        
        public VerifyOnBehalfOfRequest() {
        }
        
        public VerifyOnBehalfOfRequest(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id, byte[] biometricState) {
            this.type = type;
            this.id = id;
            this.biometricState = biometricState;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="VerifyOnBehalfOfResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class VerifyOnBehalfOfResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool VerifyOnBehalfOfResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public double score;
        
        public VerifyOnBehalfOfResponse() {
        }
        
        public VerifyOnBehalfOfResponse(bool VerifyOnBehalfOfResult, double score) {
            this.VerifyOnBehalfOfResult = VerifyOnBehalfOfResult;
            this.score = score;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBiometricAuthenticationServiceBasicChannel : SealSignBSSClientTest.BiometricAuthenticationService.IBiometricAuthenticationServiceBasic, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BiometricAuthenticationServiceBasicClient : System.ServiceModel.ClientBase<SealSignBSSClientTest.BiometricAuthenticationService.IBiometricAuthenticationServiceBasic>, SealSignBSSClientTest.BiometricAuthenticationService.IBiometricAuthenticationServiceBasic {
        
        public BiometricAuthenticationServiceBasicClient() {
        }
        
        public BiometricAuthenticationServiceBasicClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BiometricAuthenticationServiceBasicClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BiometricAuthenticationServiceBasicClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BiometricAuthenticationServiceBasicClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Enable(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id) {
            base.Channel.Enable(type, id);
        }
        
        public System.Threading.Tasks.Task EnableAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id) {
            return base.Channel.EnableAsync(type, id);
        }
        
        public void Disable(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id) {
            base.Channel.Disable(type, id);
        }
        
        public System.Threading.Tasks.Task DisableAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id) {
            return base.Channel.DisableAsync(type, id);
        }
        
        public void Remove(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type) {
            base.Channel.Remove(type);
        }
        
        public System.Threading.Tasks.Task RemoveAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type) {
            return base.Channel.RemoveAsync(type);
        }
        
        public void RemoveOnBehalfOf(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id) {
            base.Channel.RemoveOnBehalfOf(type, id);
        }
        
        public System.Threading.Tasks.Task RemoveOnBehalfOfAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id) {
            return base.Channel.RemoveOnBehalfOfAsync(type, id);
        }
        
        public void Enroll(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, byte[] biometricState) {
            base.Channel.Enroll(type, biometricState);
        }
        
        public System.Threading.Tasks.Task EnrollAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, byte[] biometricState) {
            return base.Channel.EnrollAsync(type, biometricState);
        }
        
        public void EnrollOnBehalfOf(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id, byte[] biometricState) {
            base.Channel.EnrollOnBehalfOf(type, id, biometricState);
        }
        
        public System.Threading.Tasks.Task EnrollOnBehalfOfAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id, byte[] biometricState) {
            return base.Channel.EnrollOnBehalfOfAsync(type, id, biometricState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SealSignBSSClientTest.BiometricAuthenticationService.VerifyResponse SealSignBSSClientTest.BiometricAuthenticationService.IBiometricAuthenticationServiceBasic.Verify(SealSignBSSClientTest.BiometricAuthenticationService.VerifyRequest request) {
            return base.Channel.Verify(request);
        }
        
        public bool Verify(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, byte[] biometricState, out double score) {
            SealSignBSSClientTest.BiometricAuthenticationService.VerifyRequest inValue = new SealSignBSSClientTest.BiometricAuthenticationService.VerifyRequest();
            inValue.type = type;
            inValue.biometricState = biometricState;
            SealSignBSSClientTest.BiometricAuthenticationService.VerifyResponse retVal = ((SealSignBSSClientTest.BiometricAuthenticationService.IBiometricAuthenticationServiceBasic)(this)).Verify(inValue);
            score = retVal.score;
            return retVal.VerifyResult;
        }
        
        public System.Threading.Tasks.Task<SealSignBSSClientTest.BiometricAuthenticationService.VerifyResponse> VerifyAsync(SealSignBSSClientTest.BiometricAuthenticationService.VerifyRequest request) {
            return base.Channel.VerifyAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SealSignBSSClientTest.BiometricAuthenticationService.VerifyOnBehalfOfResponse SealSignBSSClientTest.BiometricAuthenticationService.IBiometricAuthenticationServiceBasic.VerifyOnBehalfOf(SealSignBSSClientTest.BiometricAuthenticationService.VerifyOnBehalfOfRequest request) {
            return base.Channel.VerifyOnBehalfOf(request);
        }
        
        public bool VerifyOnBehalfOf(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id, byte[] biometricState, out double score) {
            SealSignBSSClientTest.BiometricAuthenticationService.VerifyOnBehalfOfRequest inValue = new SealSignBSSClientTest.BiometricAuthenticationService.VerifyOnBehalfOfRequest();
            inValue.type = type;
            inValue.id = id;
            inValue.biometricState = biometricState;
            SealSignBSSClientTest.BiometricAuthenticationService.VerifyOnBehalfOfResponse retVal = ((SealSignBSSClientTest.BiometricAuthenticationService.IBiometricAuthenticationServiceBasic)(this)).VerifyOnBehalfOf(inValue);
            score = retVal.score;
            return retVal.VerifyOnBehalfOfResult;
        }
        
        public System.Threading.Tasks.Task<SealSignBSSClientTest.BiometricAuthenticationService.VerifyOnBehalfOfResponse> VerifyOnBehalfOfAsync(SealSignBSSClientTest.BiometricAuthenticationService.VerifyOnBehalfOfRequest request) {
            return base.Channel.VerifyOnBehalfOfAsync(request);
        }
        
        public bool HasEnrollment(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type) {
            return base.Channel.HasEnrollment(type);
        }
        
        public System.Threading.Tasks.Task<bool> HasEnrollmentAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type) {
            return base.Channel.HasEnrollmentAsync(type);
        }
        
        public bool HasEnrollmentOnBehalfOf(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id) {
            return base.Channel.HasEnrollmentOnBehalfOf(type, id);
        }
        
        public System.Threading.Tasks.Task<bool> HasEnrollmentOnBehalfOfAsync(SealSignBSSClientTest.BiometricAuthenticationService.BiometricAuthenticationType type, string id) {
            return base.Channel.HasEnrollmentOnBehalfOfAsync(type, id);
        }
    }
}
